/**
 * JavaCC grammar: 
 */
options
{
  STATIC = false;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(Grammar)

package parser;
	import java.util.Vector;
	import java.util.LinkedList;
	import token.*;

    public class Grammar {

	public static Vector<Constant> constantSet;	/* Set of constant symbols */
	public static Vector<Variable> variableSet; /* Set of variable symbols */
	public static Vector<Function> functionSet;	/* Set of function symbols */

	public static Vector<Equation> to_select;
	public static Vector<Equation> selected;	

	public Grammar(String input, Vector<Equation> to_select, Vector<Equation> selected, Vector<Function> functionSet) {
	  	this.functionSet = functionSet;
	  	this.constantSet = new Vector<Constant>();
	  	this.variableSet = new Vector<Variable>();
	  	
		this.to_select = to_select;
		this.selected = selected;

      	try {
        	new Grammar(new java.io.StringReader(input)).START();
      	} catch(Exception e) {
      	  System.out.println("Oops: syntax error, check the formula!" + e.getMessage());
          System.exit(-1);
        }
    }
}

PARSER_END(Grammar)

SKIP:  { " " | "\t" | "\n" | "\r" | <"%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?> } /* "Skip characters": we don't parse them */

<*>TOKEN: {
  			<NOT:				"!"> /* Negation: in this project we have only one predicate, the equal predicate */	
		| 	<SEMICOLON:			";"> /* Semicolon: used to identify the end of an equation */
		|   <DOLLAR:			"$"> /* Dollar: used to identify the end of the set of the equations */
		| 	<COMMA:				"," > /* Comma: used to separate the function's parameters */
        |   <EQUALS:            "="> /* Equal predicate: the only predicate in this project */
        |   <LOWER_WORD:        ( <LOWER_ALFA> ) ( <LOWER_ALFA> ) ( <LOWER_ALFA> )* > /* Function symbols: for hypothesis, we use at least two letters (without numbers) for a function symbol */
        |   <UPPER_WORD:        ( <UPPER_ALFA> ) ( <NUMERIC> )* >   /* Variable symbol: for hypothesis, we use at least a upper character and a (optional) digit for a variable symbols */
	
        |   <LOWER_ALFA:       ["a"-"z"]>	/* Lower character */
        |   <#UPPER_ALFA:       ["A"-"Z"]>	/* Upper character */

        |   <NUMERIC:          ["0"-"9"]>	/* Digit */         
        |   <#ZERO_NUMERIC:     ["0"]>		/* Zero */
        |   <#NON_ZERO_NUMERIC: ["1"-"9"]>	/* Non-zero digit */
        }

/*
void LITERAL():
{
  Token sign=null;
  Token p;
  LinkedList<Term> args=new LinkedList<Term >(); 
}
{
  (sign=<NOT>)? (p=<LOWER_WORD>)?
  {
    int weight=1;
     //it is a predicate with arguments, check if I've already read it with
      //a different number of arguments
      Predicate p2 = tmpPred.get(p.image);
      
      if( p2 != null && p2.getArgsCount() != args.size() )
      {
       throw new ParseException("The predicate \"" + p.image 
                        + "\" has been already read with " + p2.getArgsCount() + " argument(s)"); 
      }
      
      for(Term t:args) // retrive the weight of my arguments
      {
        weight += t.getWeight();
      }
    Predicate newPred = new Predicate(p.image,weight,args, (sign==null) ? false:true);
    tmpPred.put(p.image,newPred);
    return newPred;
  }
}
*/

/* Parser entry point */
void START(): {}
{
  
    (EQUATION())+ <DOLLAR>	/* We identify an unbounded numbers of equation (followed by a dollar symbol)*/

}

Equation EQUATION():
{
	Term t1;
	Term t2;
	Token t = null;
	Equation e;
	boolean isNegative;
}
{
	/* An equation is a term equals to another term (with the negation sign optional) */
    (t1 = TERM()) ( t = <NOT> )? <EQUALS>  ( t2 = TERM()) <SEMICOLON>
    {
      	isNegative = t == null ? false : true;
      	e = new Equation(t1, t2, isNegative);
      	if (isNegative)
      		selected.add(e);
      	else
      		to_select.add(e);
      	return e;
    }
    
}

Term TERM():
{
	Token token;
	Variable x;
	Constant c;
	Function f;
	LinkedList<Term> list;
}
{
  
 	/* A term is a variable, a constant or at least two lower letter followed by the arguments*/
 	  ( token = <UPPER_WORD>) { x = new Variable(token.toString()); variableSet.add(x); return x; }
 	| ( token = <LOWER_ALFA> ) { c = new Constant(token.toString()); constantSet.add(c); return c; }
 	| ( token = <LOWER_WORD>) "(" list = ARGUMENTS() ")" {
 	  f = new Function(token.toString(), list);

	  for (Function fun: functionSet) {
	  	if (fun.getSymbol().equals(f.getSymbol())) {	  	  
	  		if (fun.getArity() != f.getArity()) {				System.err.println("Error: same function used with different arity");
				System.exit(-1);
	  		} else {
	  		  // Boh non so se aggiungere
	  		  	functionSet.add(f);				return f;
	  		}
	 	}	  }			
 	  functionSet.add(f); return f;
 	  }
}

LinkedList ARGUMENTS():
{
  	LinkedList<Term> list = new LinkedList<Term>();
	Term t1;
	LinkedList<Term> t2 = null;
}
{

	/* Arguments can be a term or a list of commas and terms */  
	( t1 = TERM() ) (<COMMA>  t2 = ARGUMENTS())?

	{
	  if (t2 == null) 	  	list.add(t1);
	  else {
	  	list.add(t1);
	  	list.addAll(t2);
	  }
	  return list;	}

}

